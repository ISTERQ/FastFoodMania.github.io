require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const cors = require("cors");
const path = require("path");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser");
const app = express();
const User = require('./models/user'); // –í–∞—à–∏ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
const fs = require('fs');
const reviewsFile = 'reviews.json';
const Joi = require("joi");
const Order = require('./models/Order'); // –ú–æ–¥–µ–ª–∏ –∑–∞–∫–∞–∑–æ–≤
app.use(express.json());
const session = require("express-session");

const port = 3000;
const hostname = "fyghg.h.filess.io";
const database = "sosaldbmoy_memberdeal";
const portDB = "61004";
const username = process.env.DB_USERNAME;  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
const password = process.env.DB_PASSWORD;

const mongoURI = `mongodb://${username}:${password}@${hostname}:${portDB}/${database}`;

mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true, ssl: false })
  .then(() => {
    console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");
  })
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
  });

// –í–∞—à–∏ –¥—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –∫–æ–¥
app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});


// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
function isTokenExpired(token) {
    try {
        const payload = JSON.parse(atob(token.split(".")[1])); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        return payload.exp * 1000 < Date.now(); // –ï—Å–ª–∏ exp –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫
    } catch (e) {
        return true; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    }
}


// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –Ω–∞ HTTPS
app.use((req, res, next) => {
    if (process.env.NODE_ENV === "production") {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:", req.headers["x-forwarded-proto"]);
        if (req.headers["x-forwarded-proto"] !== "https") {
            console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS...");
            return res.redirect(`https://${req.headers.host}${req.url}`);
        }
    }
    next();
});



// –£–∫–∞–∑–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.use(express.static(path.join(__dirname, "public")));


function generateTokens(user, site) {
    const issuedAt = Math.floor(Date.now() / 1000);
    
    const accessToken = jwt.sign(
        { id: user._id, username: user.username, site: "https://fastfoodmania-github-io.onrender.com", iat: issuedAt },
        JWT_SECRET,
        { expiresIn: "30m" }  // ‚è≥ Access-—Ç–æ–∫–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
    );

    const refreshToken = jwt.sign(
        { id: user._id, username: user.username, site: "https://fastfoodmania-github-io.onrender.com", iat: issuedAt },
        REFRESH_SECRET,
        { expiresIn: "7d" }  // üîÑ Refresh-—Ç–æ–∫–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π
    );

    return { accessToken, refreshToken };
}




// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
  const schema = Joi.object({
    username: Joi.string().trim().min(3).max(30).required(),
    password: Joi.string().min(6).required(),
    email: Joi.string().email().required()
  });

  const { error } = schema.validate(req.body);
  if (error) {
    return res.status(400).json({ message: error.details[0].message });
  }

  const { username, password, email } = req.body;

  try {
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 12);
    const newUser = new User({ username, email, password: hashedPassword });

    await newUser.save();
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
    return res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error: err.message });
  }
});
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email, –∞ –Ω–µ username
    const user = await User.findOne({ email: username });

    if (!user) {
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    res.status(200).json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      userId: user._id
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ü–ö-–≤–µ—Ä—Å–∏–∏
app.post('/refresh', async (req, res) => {
    const refreshToken = req.cookies.refreshTokenDesktop;

    if (!refreshToken) {
        console.error("‚ùå Refresh-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cookies");
        return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π refreshToken:", refreshToken);
    
    jwt.verify(refreshToken, REFRESH_SECRET, async (err, decoded) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ refresh-—Ç–æ–∫–µ–Ω–∞:", err.message);
            
            res.clearCookie("refreshTokenDesktop", {
                httpOnly: true,
                secure: true,
                sameSite: "None",
                path: "/"
            });

            return res.status(403).json({ message: "Refresh-—Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫" });
        }

        if (!decoded.exp || (decoded.exp * 1000 < Date.now())) {
            console.error("‚ùå Refresh-—Ç–æ–∫–µ–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å—Ç—ë–∫!");
            res.clearCookie("refreshTokenDesktop", { path: "/" });
            return res.status(403).json({ message: "Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫" });
        }

        try {
            const user = await User.findById(decoded.id);
            if (!user) {
                console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID:", decoded.id);
                return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            }

            const { accessToken, refreshToken: newRefreshToken } = generateTokens(user);
            res.setHeader("Access-Control-Allow-Credentials", "true"); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            res.cookie("refreshTokenDesktop", newRefreshToken, {
                httpOnly: true,
                secure: true,
                sameSite: "None",
                path: "/",
                maxAge: 30 * 24 * 60 * 60 * 1000  // 30 –¥–Ω–µ–π
            });

            console.log("‚úÖ Refresh-—Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ");

            // üöÄ –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            res.setHeader("Access-Control-Allow-Credentials", "true"); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            res.setHeader("Pragma", "no-cache");
            res.setHeader("Expires", "0");

            res.json({ accessToken });

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    });
});


app.post('/logout', (req, res) => {
    console.log("üîÑ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");
    
    res.clearCookie("refreshTokenDesktop", {
        httpOnly: true,
        secure: true,
        sameSite: 'None',
        path: "/",
        domain: "https://fastfoodmania-github-io.onrender.com"
    });

    res.json({ message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
app.post('/-token', (req, res) => {
  const { token: Token } = req.body;

  if (!Token) {
    return res.status(403).json({ message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  try {
    const user = jwt.verify(Token, JWT_SECRET);
    const newAccessToken = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ token: newAccessToken });
  } catch (err) {
    res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
app.get("/connect", (req, res) => {
  res.send("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø–µ—à–Ω–æ!");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', error: err.message });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  res.status(404).json({ message: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});


app.post('/order', async (req, res) => {
  try {
    const { userId, items, total } = req.body;

    const newOrder = new Order({ userId, items, total });
    await newOrder.save();

    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get('/orders/:userId', async (req, res) => {
  try {
    const orders = await Order.find({ userId: req.params.userId }).sort({ createdAt: -1 });
    res.json(orders);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
async function loadOrders(userId) {
  const res = await fetch(`https://fastfoodmania-github-io.onrender.com/orders/${userId}`);
  const orders = await res.json();
  // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
}
app.get('/orders/:userId', async (req, res) => {
  const { userId } = req.params;
  try {
    const orders = await Order.find({ userId }).sort({ createdAt: -1 });
    res.json(orders);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({ secret: "yourSecretKey", resave: false, saveUninitialized: true }));

MongoClient.connect(url, function (err, client) {
  if (err) {
    console.log("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", err);
    return;
  }

  console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!");

  const db = client.db(database);
  const usersCollection = db.collection("users");  // –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

  // –†–æ—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞
  app.post("/login", async (req, res) => {
    const { username, password } = req.body;

    try {
      const user = await usersCollection.findOne({ username });
      if (user && bcrypt.compareSync(password, user.password)) {
        // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        req.session.user = user;
        res.json({ success: true, message: "–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É", profileButton: true });
      } else {
        res.json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
      }
    } catch (err) {
      console.error(err);
      res.json({ success: false, message: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" });
    }
  });

  // –†–æ—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
  app.get("/logout", (req, res) => {
    req.session.destroy();
    res.redirect("/");
  });

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  });
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/get-profile', (req, res) => {
  if (req.session.user) {
      res.json({ 
          success: true, 
          user: {
              name: req.session.user.name, // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              email: req.session.user.email // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          }
      });
  } else {
      res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/get-order-history', (req, res) => {
  if (req.session.user) {
      const userId = req.session.user._id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏

      // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const ordersCollection = db.collection("orders");

      ordersCollection.find({ userId }).toArray((err, orders) => {
          if (err) {
              res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤' });
          } else {
              res.json({ success: true, orders });
          }
      });
  } else {
      res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
});
// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/profile', async (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
  }

  try {
    const user = await User.findById(req.session.user._id);  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ username: user.username, email: user.email });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/profile', async (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
  }

  try {
    const user = await User.findById(req.session.user._id);  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ username: user.username, email: user.email });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
